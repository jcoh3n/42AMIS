API Documentation and guides for the developers.
Reference
Guides
The 42 API provide programmatic access to read and write 42's data. You can get and interact with the whole intranet data, and do things such creating a new message on the forum, read users profiles, get datas on a project, and more. On his second version, it identifies 42 applications and users using OAuth, and responses are available in JSON.

Whether you're looking to build an official 42 integration for your service, or you just want to build something awesome, we can help you get started.

The API works over the https protocol. and accessed from the api.intra.42.fr domain.

The current endpoint is https://api.intra.42.fr/v2.
All data is sent and received as JSON.
Blank fields are included as null instead of being omitted.
All timestamps are returned in ISO 8601 format
Current version
The current API version is 2.0.

Authentication
The authentication on the 42 API works with OAuth2.

OAuth2 is a protocol that lets external apps request authorization to private details in a user’s 42 account without getting their password. This is preferred over a basic authentication because tokens can be limited to specific types of data, and can be revoked by users at any time.

All developers need to register their application before getting started. A registered OAuth application is assigned a unique Client ID and Client Secret. The Client Secret should not be shared.

Once the access token aquired, it can be passed in the URL with the access_token parameter, or in the Authorization: Bearer YOUR_TOKEN header field.

Errors
The 42 API uses the following error codes:

Http Code	Error code	Meaning
400		The request is malformed
401		Unauthorized
403		Forbidden
404		Page or resource is not found
422		Unprocessable entity
500		We have a problem with our server. Please try again later.
Connection refused		Most likely cause is not using HTTPS.
Scopes
App can have different access scopes.

Authorization scopes are a way to determine to what extent the client can use resources located in the provider.

When the client requests the authorization it specifies in which scope they would like to be authorized. This information is then displayed to the user - resource owner - and they can decide whether or not they accept the given application to be able to act in specified scopes.

Requesting a resource with wrong or insufficient scopes will return a 403 Forbidden response, with more details in the WWW-Authenticate response header. For example, for an application without the projects scope:

HTTP
POST https://api.intra.42.fr/v2/topics/4242/messages
HTTP/1.1 403 Forbidden
Cache-Control: no-store
Content-Type: application/json; charset=utf-8
Pragma: no-cache
Transfer-Encoding: chunked
Vary: Origin
WWW-Authenticate: Bearer realm="42 API", error="insufficient scope", error_description="The action need the following scopes: [forum]"
X-Application-Id: 7
X-Application-Name: Brobot
X-Application-Roles: None
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Meta-Request-Version: 0.4.0
X-Rack-CORS: preflight-hit; no-origin
X-Request-Id: bb64ca44-142b-46a6-b590-af95e2e05e66
X-Runtime: 0.045248
X-XSS-Protection: 1; mode=block
{
"error": "Forbidden",
"message": "Insufficient scope. The action need the following scopes: [forum] (Create, update and destroy topics and messages)"
}
Pagination
The 42 API paginates all resources on the index method.

Requests that return multiple items will be paginated to 30 items by default. You have two ways to specify further pages:

The page parameter. You can also set a custom page size (up to 100) with the per_page parameter.
The page[number] paramater with the page[size] parameter.
Note that for technical reasons not all endpoints can go up to 100 on the the per_page / page[size] parameter.
The Link HTTP response header contains pagination data with first, previous, next and last raw pages links when available, under the format

link: <http://api.intra.42.fr/v2/{Resource}?page=X+1>; rel="next", <http://api.intra.42.fr/v2/{Resource}?page=X-1>; rel="prev", <http://api.intra.42.fr/v2/{Resource}?page=1>; rel="first", <http://api.intra.42.fr/v2/{Resource}?page=X+n>; rel="last"
There is also:

A X-Page header field, which contains the current page.
A X-Per-Page header field, which contains the current pagination length.
A X-Total header field, which contains the count of pages.
Filtering
The filter query parameter can be used to filter a collection on one or several fields for one or several values. The filter parameter takes the field to filter as a key, and the values to filter as the value. Multiples values must be comma-separated (,).

For example, the following is a request for all users who have their piscine in 2013, but only in September or July:

HTTP
GET /users?filter[pool_year]=2013&filter[pool_month]=september,july HTTP/1.1
Sorting
All index endpoints support multiple sort fields by allowing comma-separated (,) sort fields, they are applied in the order specified.

The sort order for each sort field is ascending unless it is prefixed with a minus (U+002D HYPHEN-MINUS, “-“), in which case it is descending.

For example, GET /users?sort=kind,-login will return the users sorted by kind. Any users with the same kind will then be sorted by their login in descending alphabetical order.

Rate limiting
By default, your applications has limited to 2 requests/second and 1200 requests / hour

JSON-API format (Decommissioned)
The API actually support (in an alpha-stage) the JSON-API format specification. You can request a JSON-API by specifying the request ContentType as application/vnd.api+json.

Getting informations about your token
If you want to know more about your token, you can fetch https://api.intra.42.fr/oauth/token/info.

Bash
curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" https://api.intra.42.fr/oauth/token/info
# {"resource_owner_id":74,"scopes":["public"],"expires_in_seconds":7174,"application":{"uid":"3089cd94d72cc9109800a5eea5218ed4c3e891ec1784874944225878b95867f9"},"created_at":1439460680}%
Specification
Current version
Authentication
Errors
Scopes
Pagination
Filtering
Sorting
Rate limiting
JSON-API format (Decommissioned)
Getting informations about your token
Getting started
Web application flow
Contributing
Readme
Proudly made with tons of favorite by the dev unit.

API Documentation and guides for the developers.
Reference
Guides
Create an application
In order to use the 42 API, you first need to create a v2 application here.

You will need to configure a few things in order to make your application:

The name of your application, wich needs to be explicit (please avoid names like test or app).
The redirect URI(s). Theses URI(s) are needed if you app acts as a third tier between the 42 data and an user (this flow is called Web Application Flow), and specify where the user need to be redirected after his authentication. If you plan to use your app just as a server-side app, without user interaction, you can set any valid adress, you'll not need theses URI.
The scopes you'll need. A scope is an aera of access. By default, your application only have access to public data, it's your call to add more scopes. Try to only add the scopes you'll really need, you can change your application scopes later if you need more permissions.
Public set if your application is visible by other users or not.
All the other fields are facultative, and can be set later.
Note: The complete description of the authentication process through the OAuth2 Web Application Flow is described in the next section of this guide.

Get your credentials
Awesome ! You just created your first application ! Now, take a look on your application page, we got a lot of informations there, but the most important are:

The client uid, an unique identifier for your application.
The client secret, an secret passphrase for your application, which must be kept secret, and only used on server side, where users can't see it.
Make basic requests
Now, you have all you need to setup a little basic script using the API trough your application. In this example, we will use the Client Credentials Flow, in ruby, with the OAuth2 ruby wrapper, but OAuth2 wrappers exists in most languages. The Client Credentials flow is probably the most simple flow of OAuth 2 flows. The main difference from the others is that this flow is not associated with a user. You can read more about this OAuth flow directly from the reference documentation of OAuth2.

First of all, we'll request an access token with our application credentials.

Ruby
require "oauth2"
UID = "Your application uid"
SECRET = "Your secret token"
# Create the client with your credentials
client = OAuth2::Client.new(UID, SECRET, site: "https://api.intra.42.fr")
# Get an access token
token = client.client_credentials.get_token
Requesting an access token with the client credentials flow is, in fact, just a POST request on the /oauth/token endpoint with a grant_type parameter set to client_credentials. If you wanted to do this with the command line, the equivalent Curl line will be:

curl -X POST --data "grant_type=client_credentials&client_id=MY_AWESOME_UID&client_secret=MY_AWESOME_SECRET" https://api.intra.42.fr/oauth/token
JSON
{
"access_token":"42804d1f2480c240f94d8f24b45b318e4bf42e742f0c06a42c6f4242787af42d",
"token_type":"bearer",
"expires_in":7200,
"scope":"public",
"created_at":1443451918
}
Now, we can fetch all the public data which don't need user authentication, like the list of the cursus in 42. The reference documentation gave us (by the Cursus resource page) the endpoint /v2/cursus.

Ruby
token.get("/v2/cursus").parsed
# => [{"id"=>1, "created_at"=>"2014-11-02T17:43:38.480+01:00", "name"=>"42", "slug"=>"42", "users_count"=>1918, "users_url"=>"https://api.intra.42.fr/v2/cursus/42/users", "projects_url"=>"https://api.intra.42.fr/v2/cursus/42/projects", "topics_url"=>"https://api.intra.42.fr/v2/cursus/42/topics"}, ...]
Hooray ! We got our data ! And what about the users in the cursus 42 ?

Ruby
users_in_cursus = token.get("/v2/cursus/42/users").parsed
# => {"id"=>2, "login"=>"avisenti", "url"=>"https://api.intra.42.fr/v2/users/avisenti", "end_at"=>nil}, {"id"=>3, "login"=>"spariaud", "url"=>"https://api.intra.42.fr/v2/users/spariaud", "end_at"=>nil}, ...
users_in_cursus.count
# => 30
What the hell ? Only 30 users ? And what says the documentation about that ?

Pagination
The documentation says that the resource is paginated by 30 items by defaut, and that we can specify a page[number] parameter (or, more simpler, the page parameter), in order to navigate trough it. Let's try to fetch the second page:

Ruby
second_page = token.get("/v2/cursus/42/users", params: {page: {number: 2}})
# => #<OAuth2::Response:0x007f9ba3b7eb98 @response=#<Faraday::Response:0x007f9ba3b949c0 @on_complete_callbacks=[], @env=#<Faraday::Env @method=:get @body="[{\"id\":35,\"login\":\"droger\",\"url\":\"https://api.intra.42.fr/v2/users/droger\",\"end_at\":null},{\"id\":36,\"login\":\"edelbe\",\"url\":\"https://api.intra.42.fr/v2/users/edelbe\"...
second_page.parsed
# => {"id"=>35, "login"=>"droger", "url"=>"https://api.intra.42.fr/v2/users/droger", "end_at"=>nil}, {"id"=>36, "login"=>"edelbe", "url"=>"https://api.intra.42.fr/v2/users/edelbe", "end_at"=>nil}, ...
Well, it seems to work ! But how can we know if there is a next page ? One simple solution is to go forward until the call returns an empty array, but if we need more informations, we can take a look on the Link HTTP response header.

Ruby
second_page.headers["Link"]
# => "<https://api.intra.42.fr/v2/cursus/42/users?page=3>; rel=\"next\", <https://api.intra.42.fr/v2/cursus/42/users?page=1>; rel=\"prev\", <https://api.intra.42.fr/v2/cursus/42/users?page=1>; rel=\"first\", <https://api.intra.42.fr/v2/cursus/42/users?page=64>; rel=\"last\""
We now have the links for the first, the next, the previous and the last pages. The response headers contains a lot of more or less useful informations, like the name of your application, the id and the roles.

HTTP
GET https://api.intra.42.fr/v2/messages?page[number]=1
HTTP/1.1 200 OK
Cache-Control: max-age=0, private, must-revalidate
Content-Type: application/json; charset=utf-8
ETag: W/"b326132feb08f61b7de85a13ca83f264"
Link: <https://api.intra.42.fr/v2/messages?page=1>; rel="first", <https://api.intra.42.fr/v2/messages?page=1>; rel="prev", <https://api.intra.42.fr/v2/messages?page=586>; rel="last", <https://api.intra.42.fr/v2/messages?page=3>; rel="next"
Transfer-Encoding: chunked
Vary: Origin
X-Application-Id: 318
X-Application-Name: test-app
X-Application-Roles: None
X-Content-Type-Options: nosniff
X-Frame-Options: SAMEORIGIN
X-Meta-Request-Version: 0.4.0
X-Page: 2
X-Per-Page: 30
X-Rack-CORS: preflight-hit; no-origin
X-Request-Id: c763e95e-95a6-4307-88da-f441038be349
X-Runtime: 0.278242
X-Total: 17570
X-XSS-Protection: 1; mode=block
{...}
You can also increase the number of results returned by the request with the page[size] parameter (or the per_page parameter). Almost all the endpoints can return up to 100 results per page.

Limits
By default, your applications has limited to 2 requests/second and 1200 requests / hour

Roles
Applications can have roles, which grants particular privileges.

There is a short list of the most common roles:

Alpha: Unstable features
Beta: Intranet beta-testers
Official App: Approved application to up rate limit
Certified App: Certified application manually by a staff member to up rate limit and access to more features
Moderator: Moderate topics, messages and versions on the forum
Basic Tutor: Manage projects, scales and all cursus related data
Basic Staff: Member of the staff, can manage community services, closes, exams and access advanced student data
The roles of your application are present in the x-application-roles field of the response header.

If your application is production ready, public and useful, you can send us a mail to request the Official App role.

That's it for now. If your want to go deeper, and allow users to use their 42 account from a third-party website, you can continue with the web application flow tutorial.

Getting informations about your token
If you want to know more about your token, you can fetch https://api.intra.42.fr/oauth/token/info.

Bash
curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" https://api.intra.42.fr/oauth/token/info
# {"resource_owner_id":74,"scopes":["public"],"expires_in_seconds":7174,"application":{"uid":"3089cd94d72cc9109800a5eea5218ed4c3e891ec1784874944225878b95867f9"},"created_at":1439460680}%
Specification
Getting started
Create an application
Get your credentials
Make basic requests
Pagination
Limits
Roles
Getting informations about your token
Web application flow
Contributing
Readme
Proudly made with tons of favorite by the dev unit.

API Documentation and guides for the developers.
Reference
Guides
This is a description of the OAuth2 flow from 3rd party web sites.

In the Web Application flow (also known as the Authorization Code flow), the resource owner (a 42 user) is first redirected by the application to the OAuth authorization server at the API provider. The authorization server checks to see if the user has an active session (in our case, if the user is logged on the 42 intranet). If she does, the authorization server prompts her for access to the requested data. After she grants access, she is redirected back to the web application and an authorization code is included in the URL as the code query parameter: http://www.example.com/oauth_callback?code=ABC1234

Because the code is passed as a query parameter, the web browser sends it along to the web server that is acting as the OAuth client. This authorization code is then exchanged for an access token using a server-to-server call from the application to the authorization server. This access token is used by the client to make API calls.

Let's see how we can implement it with the 42 API.

Redirect users to request 42 access
That's the first step. Link or redirect users to the API authorize url: https://api.intra.42.fr/oauth/authorize. This must be properly formatted for your application and will return a permissions screen for the user to authorize. For convenience, a formatted authorize URL including your client_id is provided for each application in the apps page.

Base url
GET https://api.intra.42.fr/oauth/authorize
Parameters
Name	Type	Description
client_id	string	Required. The client ID you received from 42 when you registered.
redirect_uri	string	Required. The URL in your app where users will be sent after authorization. See details below about redirect urls.
scope	string	A space separated list of scopes. If not provided, scope defaults to an empty list of scopes for users that don't have a valid token for the app. For users who do already have a valid token for the app, the user won't be shown the OAuth authorization page with the list of scopes. Instead, this step of the flow will automatically complete with the same scopes that were used last time the user completed the flow.
state	string	An unguessable random string. It is used to protect against cross-site request forgery attacks.
response_type	string	The response type. Ususally code.
All this things will make together a nice and understandable URI, like:

https://api.intra.42.fr/oauth/authorize?client_id=your_very_long_client_id&redirect_uri=http%3A%2F%2Flocalhost%3A1919%2Fusers%2Fauth%2Fft%2Fcallback&response_type=code&scope=public&state=a_very_long_random_string_witchmust_be_unguessable'
Small note: when formatting the scopes parameters, be sure to read above about the distinction between application-level and token-level scopes. this has been a point of friction for some developers.

42 redirects back to your site
auth_dialog The 42 auth dialog

If the user grants the permission for your application to use the requested data (see scopes), it will be redirected to your redirect_uri with a temporary code in a GET code parameter as well as the state you provided in the previous step in a state parameter.

If the states don't match, the request has been created by a third party and the process should be aborted.

Exchange your code for an access token
You're almost here ! The last thing to do is a POST request to the https://api.intra.42.fr/oauth/token endpoint, with your client_id, your client_secret, the previous code and your redirect_uri. This request must be performed on server side, over a secure connexion.

Useless note: This corresponds to the token endpoint, section 3.2 of the OAuth 2 RFC. Happy ?

Base url
POST https://api.intra.42.fr/oauth/token
Parameters
Name	Type	Description
grant_type	string	Required. The grant type. In this case, it's authorization_code.
client_id	string	Required. The client ID you received from 42 when you registered.
client_secret	string	Required. The client secret you received from 42 when you registered.
code	string	Required. The code you received as a response to Step 1.
redirect_uri	string	The URL in your app where users will be sent after authorization.
state	string	The unguessable random string you optionally provided in Step 1.
For example, with curl:

Bash
curl -F grant_type=authorization_code \
-F client_id=9b36d8c0db59eff5038aea7a417d73e69aea75b41aac771816d2ef1b3109cc2f \
-F client_secret=d6ea27703957b69939b8104ed4524595e210cd2e79af587744a7eb6e58f5b3d2 \
-F code=fd0847dbb559752d932dd3c1ac34ff98d27b11fe2fea5a864f44740cd7919ad0 \
-F redirect_uri=https://myawesomeweb.site/callback \
-X POST https://api.intra.42.fr/oauth/token
Make API requests with your token
Include your token in all your requests in a authorization header:

Authorization: Bearer YOUR_ACCESS_TOKEN
For example, you can fetch the current token owner, with curl:

Bash
curl -H "Authorization: Bearer YOUR_ACCESS_TOKEN" https://api.intra.42.fr/v2/me
# {"id":56911,"email":"pedago@staff.42.fr","login":"30_1","url":"http://localhost:13000/v2/users/pedago","phone":"hidden","displayname":"Philibert Edago","image_url":"https://cdn.intra.42.fr/userprofil/pedago.jpg","staff?":false,"correction_point":3,"pool_month":null,"pool_year":null,"location":null,"wallet":5,"groups":[],"cursus":[{"cursus":{"id":1,"name":"42","created_at":"2014-11-02T16:43:38.480Z","updated_at":"2016-05-25T14:33:59.420Z","slug":"42","kind":"normal"},"end_at":null,"level":0.0,"grade":"cadet","projects":[],"skills":[]},{"cursus":{"id":4,"name":"Piscine C","created_at":"2015-05-01T17:46:08.433Z","updated_at":"2016-06-07T17:09:43.612Z","slug":"piscine-c","kind":"normal"},"end_at":null,"level":0.0,"grade":null,"projects":[],"skills":[]}],"achievements":[...],"titles":[],"partnerships":[],"patroned":[],"patroning":[],"expertises_users":[],"campus":[{"id":1,"name":"Paris","time_zone":"Paris","language":{"id":1,"name":"Français","identifier":"fr","created_at":"2014-11-02T16:43:38.466Z","updated_at":"2016-06-08T13:40:28.805Z"},"users_count":5929,"vogsphere_id":1}]}
If you can't modify http headers, you can send your token as a access_token parameter.

Specification
Getting started
Web application flow
Redirect users to request 42 access
42 redirects back to your site
Exchange your code for an access token
Make API requests with your token
Contributing
Readme
Proudly made with tons of favorite by the dev unit.